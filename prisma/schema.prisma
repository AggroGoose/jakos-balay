// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String   @db.Text
  type               String
  provider           String
  providerAccountId  String   @db.VarChar(256)
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Category {
  id              String    @id @default(cuid())
  title           String
  description     String?   @db.Text
  posts           Post[]
  subCategories   SubCategory[]

  @@unique([id, title])
}

model Permission {
  id              String    @id @default(cuid())
  name            String
  description     String?   @db.Text
  roles           RolePermission[]
}

model Post {
  id              String    @id @default(cuid())
  title           String
  slug            String    @unique
  summary         String?   @db.Text
  featureImg      String?   @db.Text 
  audioTrack      String?
  memberOnly      Boolean   @default(false)
  datePublished   DateTime  @default(now())
  dateUpdated     DateTime  @default(now())
  hasBlocks       Boolean   @default(false)
  numLike         Int       @default(0)
  numSaved        Int       @default(0)
  numShare        Int       @default(0)
  views           Int       @default(0)

  category        Category  @relation(fields: [categoryId, categoryName], references: [id, title], onDelete: Cascade)
  categoryId      String
  categoryName    String 
  likes           PostLike[]
  saves           PostSave[]
  subCategory     SubCategory  @relation(fields: [subCategoryId, subCategoryName], references: [id, title], onDelete: Cascade)
  subCategoryId   String
  subCategoryName String
  tags            PostTag[]
}

model PostLike {
  post            Post  @relation(fields: [postId], references: [id])
  postId          String
  user            User  @relation(fields: [userId], references: [id])
  userId          String

  @@id([postId, userId])
}

model PostSave {
  post            Post  @relation(fields: [postId], references: [id])
  postId          String
  user            User  @relation(fields: [userId], references: [id])
  userId          String

  @@id([postId, userId])
}

model PostTag {
  post            Post  @relation(fields: [postId], references: [id])
  postId          String
  tag             Tag  @relation(fields: [tagId, tagName], references: [id, title])
  tagId           String
  tagName         String

  @@id([postId, tagId])
}

model Role {
  id              String    @id @default(cuid())
  title           String
  description     String?   @db.Text
  permissions     RolePermission[]
  users           User[]
}

model RolePermission {
  role            Role  @relation(fields: [roleId], references: [id])
  roleId          String
  permission      Permission  @relation(fields: [permissionId], references: [id])
  permissionId    String

  @@id([roleId, permissionId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SubCategory {
  id              String    @id @default(cuid())
  title           String
  description     String?   @db.Text
  posts           Post[]
  categoryId      String?
  category        Category?  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([id, title])
}

model Tag {
  id              String    @id @default(cuid())
  title           String
  description     String?   @db.Text
  posts           PostTag[]

  @@unique ([id, title])
}

model User {
  id            String    @id @default(cuid()) @db.VarChar(256)
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?
  role          Role?  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId        String?
  accounts      Account[]
  likes         PostLike[]
  saves         PostSave[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}